install.packages("wesanderson")
library(likert)
library(sessioninfo)
library(here)
surveydata <- read.csv(here("data", "surveydata.csv"))
View(surveydata)
library(sp)
library(sp)
library(rgdal)
library(maptools)
library(rgeos)
library(raster)
library(shotGroups)
library(reshape)
library(data.table)
library(RSAGA)
library(stringr)
library(pROC)
library(stringr)
library(pROC)
library(vcd)
library(caret)
#------set SAGA environment----------------------------------------
###################################################################
#--ussually is best to move a SAGA binary package to RSAGA folder from the library
#myenv=rsaga.env(workspace="e:/Dropbox/Dropbox (Licente_Disertatii)/2016_NHESS",
#                path="C:/Users/MIHAI/Documents/R/win-library/3.2/RSAGA/SAGA-GIS",
#                modules="C:/Users/MIHAI/Documents/R/win-library/3.2/RSAGA/SAGA-GIS/modules",
#                version="2.2.3", cores=8)
###################################################################
#------read the shapefile------------------------------------------
###################################################################
shape <- readShapeSpatial("landslide_inventory",
proj4string = CRS("+proj=sterea +lat_0=46 +lon_0=25 +k=0.99975 +x_0=500000 +y_0=500000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs"),
repair=TRUE, force_ring=T,
verbose=TRUE)
#------create the list storing the minimum bounding boxes
###################################################################
coord.list=list()
mbbox.list=list()
bbox.list=list()
polygon.bbox.list=list()
polygons.bbox.list=list()
bbox.sorted.list=list()
ids=1:4
for (i in 1:length(shape))
{
coord.list[[i]]=shape@polygons[[i]]@Polygons[[1]]@coords
mbbox.list[[i]]=getMinBBox(coord.list[[i]])
bbox.list[[i]]=data.frame(mbbox.list[[i]]$pts)
}
###################################################################
#------populating the polygon shapefile with the details of
#------the bounding boxes corners and midpoints
###################################################################
ps <- lapply(bbox.list, Polygon)
for (i in 1:length(shape))
{
bbox.list[[i]]$ids=ids
bbox.list[[i]]$poly_id=shape@data$id[[i]]
shape@data$width[[i]]=mbbox.list[[i]]$width
shape@data$height[[i]]=mbbox.list[[i]]$height
shape@data$angle[[i]]=mbbox.list[[i]]$angle
shape@data$p1x1y1[[i]]=bbox.list[[i]][1,1]
shape@data$p1x1y2[[i]]=bbox.list[[i]][1,2]
shape@data$p2x1y1[[i]]=bbox.list[[i]][2,1]
shape@data$p2x1y2[[i]]=bbox.list[[i]][2,2]
shape@data$p3x1y1[[i]]=bbox.list[[i]][3,1]
shape@data$p3x1y2[[i]]=bbox.list[[i]][3,2]
shape@data$p4x1y1[[i]]=bbox.list[[i]][4,1]
shape@data$p4x1y2[[i]]=bbox.list[[i]][4,2]
#
shape@data$mdp1x1y1[[i]]=(bbox.list[[i]][1,1]+bbox.list[[i]][2,1])/2
shape@data$mdp1x1y2[[i]]=(bbox.list[[i]][1,2]+bbox.list[[i]][2,2])/2
shape@data$mdp2x1y1[[i]]=(bbox.list[[i]][2,1]+bbox.list[[i]][3,1])/2
shape@data$mdp2x1y2[[i]]=(bbox.list[[i]][2,2]+bbox.list[[i]][3,2])/2
shape@data$mdp3x1y1[[i]]=(bbox.list[[i]][3,1]+bbox.list[[i]][4,1])/2
shape@data$mdp3x1y2[[i]]=(bbox.list[[i]][3,2]+bbox.list[[i]][4,2])/2
shape@data$mdp4x1y1[[i]]=(bbox.list[[i]][4,1]+bbox.list[[i]][1,1])/2
shape@data$mdp4x1y2[[i]]=(bbox.list[[i]][4,2]+bbox.list[[i]][1,2])/2
}
p1 <- lapply(seq_along(ps), function(i) Polygons(list(ps[[i]]), ID = shape@polygons[[i]]@ID[[1]]))
sp1=SpatialPolygons(p1, proj4string = CRS("+proj=sterea +lat_0=46 +lon_0=25 +k=0.99975 +x_0=500000
+y_0=500000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,
-0.053,0.844,-0.84 +units=m +no_defs"))
df=shape@data
SPDF <- SpatialPolygonsDataFrame(sp1, df)
writeOGR(SPDF, ".", "landslide_inventory_mbbox", driver="ESRI Shapefile")
###################################################################
#------create points from bounding box corners---------------------
###################################################################
points=do.call("rbind", lapply(bbox.list, as.data.frame))
xy <- points[,c(1,2)]
writeOGR(spdf, ".", "landslide_inventory_mbbox_points", driver="ESRI Shapefile")
###################################################################
#------create midpoints from bounding box sides--------------------
###################################################################
midpoints.list=list()
spdf <- SpatialPointsDataFrame(coords = xy, data = points,
proj4string = CRS("+proj=sterea +lat_0=46 +lon_0=25 +k=0.99975 +x_0=500000 +y_0=500000
+ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs"))
writeOGR(spdf, ".", "landslide_inventory_mbbox_points", driver="ESRI Shapefile")
###################################################################
#------create midpoints from bounding box sides--------------------
###################################################################
midpoints.list=list()
for (i in 1:length(shape))
{
midpoints.list[[i]]=data.frame(((bbox.list[[i]][1,1]+bbox.list[[i]][2,1])/2),
((bbox.list[[i]][1,2]+bbox.list[[i]][2,2])/2))
colnames(midpoints.list[[i]])=c("x","y")
row2=c(((bbox.list[[i]][2,1]+bbox.list[[i]][3,1])/2),(bbox.list[[i]][2,2]+bbox.list[[i]][3,2])/2)
row3=c(((bbox.list[[i]][3,1]+bbox.list[[i]][4,1])/2),(bbox.list[[i]][3,2]+bbox.list[[i]][4,2])/2)
row4=c(((bbox.list[[i]][4,1]+bbox.list[[i]][1,1])/2),(bbox.list[[i]][4,2]+bbox.list[[i]][1,2])/2)
midpoints.list[[i]]=rbind(midpoints.list[[i]], row2)
midpoints.list[[i]]=rbind(midpoints.list[[i]], row3)
midpoints.list[[i]]=rbind(midpoints.list[[i]], row4)
midpoints.list[[i]]$ids=ids
midpoints.list[[i]]$poly_id=shape@data$id[[i]]
}
{
midpoints.list[[i]]=data.frame(((bbox.list[[i]][1,1]+bbox.list[[i]][2,1])/2),
((bbox.list[[i]][1,2]+bbox.list[[i]][2,2])/2))
colnames(midpoints.list[[i]])=c("x","y")
row2=c(((bbox.list[[i]][2,1]+bbox.list[[i]][3,1])/2),(bbox.list[[i]][2,2]+bbox.list[[i]][3,2])/2)
row3=c(((bbox.list[[i]][3,1]+bbox.list[[i]][4,1])/2),(bbox.list[[i]][3,2]+bbox.list[[i]][4,2])/2)
row4=c(((bbox.list[[i]][4,1]+bbox.list[[i]][1,1])/2),(bbox.list[[i]][4,2]+bbox.list[[i]][1,2])/2)
midpoints.list[[i]]=rbind(midpoints.list[[i]], row2)
midpoints.list[[i]]=rbind(midpoints.list[[i]], row3)
midpoints.list[[i]]=rbind(midpoints.list[[i]], row4)
midpoints.list[[i]]$ids=ids
midpoints.list[[i]]$poly_id=shape@data$id[[i]]
}
#
midpoints=do.call("rbind", lapply(midpoints.list, as.data.frame))
xxyy <- midpoints[,c(1,2)]
midspdf <- SpatialPointsDataFrame(coords = xxyy, data = midpoints,
proj4string = CRS("+proj=sterea +lat_0=46 +lon_0=25 +k=0.99975 +x_0=500000 +y_0=500000
+ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84 +units=m +no_defs"))
writeOGR(midspdf, ".", "landslide_inventory_midpoints", driver="ESRI Shapefile")
###################################################################
#------add DEM values to corner points and midpoints--------------
###################################################################
#---try with SRTM
#dem=raster("dem_miletin_srtm.asc", crs=("+proj=sterea +lat_0=46 +lon_0=25 +k=0.99975 +x_0=500000
#                                        +y_0=500000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,
#                                   -0.053,0.844,-0.84 +units=m +no_defs"))
#---or with high resolution DEM
dem=raster("dem_miletin_srtm.asc", crs=("+proj=sterea +lat_0=46 +lon_0=25 +k=0.99975 +x_0=500000
+y_0=500000 +ellps=krass +towgs84=33.4,-146.6,-76.3,-0.359,
-0.053,0.844,-0.84 +units=m +no_defs"))
zpoints=extract(dem, spdf, df=T, sp=T)
zpoints=extract(dem, spdf, df=T, sp=T)
writeOGR(zpoints, ".", "landslide_inventory_mbbox_points_dem", driver="ESRI Shapefile")
writeOGR(zpoints, ".", "landslide_inventory_mbbox_points_dem", driver="ESRI Shapefile")
writeOGR(midzpoints, ".", "landslide_inventory_midpoints_dem", driver="ESRI Shapefile")
zpoints=extract(dem, spdf, df=T, sp=T)
writeOGR(zpoints, ".", "landslide_inventory_mbbox_points_dem", driver="ESRI Shapefile")
midzpoints=extract(dem, midspdf, df=T, sp=T)
writeOGR(midzpoints, ".", "landslide_inventory_midpoints_dem", driver="ESRI Shapefile")
#
z=zpoints@data
shapef=cast(z, poly_id~ids)
zz=data.frame(shapef)
shape1=merge(shape, zz, by.x="id", by.y="poly_id", df=T, sp=T)
colnames(shape1@data)[which(names(shape1@data) == "X1")] <- "Zcnr1"
colnames(shape1@data)[which(names(shape1@data) == "X2")] <- "Zcnr2"
colnames(shape1@data)[which(names(shape1@data) == "X3")] <- "Zcnr3"
colnames(shape1@data)[which(names(shape1@data) == "X4")] <- "Zcnr4"
#
mz=midzpoints@data
mshapef=cast(mz, poly_id~ids)
zzz=data.frame(mshapef)
shape1=merge(shape1, zzz, by.x="id", by.y="poly_id", df=T, sp=T)
colnames(shape1@data)[which(names(shape1@data) == "X1")] <- "Zmidp1"
colnames(shape1@data)[which(names(shape1@data) == "X2")] <- "Zmidp2"
colnames(shape1@data)[which(names(shape1@data) == "X3")] <- "Zmidp3"
colnames(shape1@data)[which(names(shape1@data) == "X4")] <- "Zmidp4"
###################################################################
#------Compute the needed values-----------------------------------
###################################################################
shape1@data$dz12=sqrt((shape1@data$Zcnr1-shape1@data$Zcnr2)^2)
shape1@data$dz23=sqrt((shape1@data$Zcnr2-shape1@data$Zcnr3)^2)
shape1@data$dz34=sqrt((shape1@data$Zcnr3-shape1@data$Zcnr4)^2)
shape1@data$dz41=sqrt((shape1@data$Zcnr4-shape1@data$Zcnr1)^2)
shape1@data$L=sqrt((shape1@data$p1x1y1-shape1@data$p2x1y1)^2+(shape1@data$p1x1y2-shape1@data$p2x1y2)^2)
shape1@data$W=sqrt((shape1@data$p2x1y1-shape1@data$p3x1y1)^2+(shape1@data$p2x1y2-shape1@data$p3x1y2)^2)
shape1@data$elongated=ifelse(shape1@data$L>=shape1@data$W,"Yes","No")
shape1@data$p1x1y1=ifelse(shape1@data$elongated=="Yes",shape1@data$p1x1y1,shape1@data$p2x1y1)
shape1@data$p1x1y2=ifelse(shape1@data$elongated=="Yes",shape1@data$p1x1y2,shape1@data$p2x1y2)
shape1@data$p2x1y1=ifelse(shape1@data$elongated=="Yes",shape1@data$p2x1y1,shape1@data$p3x1y1)
shape1@data$p2x1y2=ifelse(shape1@data$elongated=="Yes",shape1@data$p2x1y2,shape1@data$p3x1y2)
shape1@data$p3x1y1=ifelse(shape1@data$elongated=="Yes",shape1@data$p3x1y1,shape1@data$p4x1y1)
shape1@data$p3x1y2=ifelse(shape1@data$elongated=="Yes",shape1@data$p3x1y2,shape1@data$p4x1y2)
shape1@data$p4x1y1=ifelse(shape1@data$elongated=="Yes",shape1@data$p4x1y1,shape1@data$p1x1y1)
shape1@data$p4x1y2=ifelse(shape1@data$elongated=="Yes",shape1@data$p4x1y2,shape1@data$p1x1y2)
shape1@data$oL=sqrt((shape1@data$p1x1y1-shape1@data$p2x1y1)^2+(shape1@data$p1x1y2-shape1@data$p2x1y2)^2)
shape1@data$oW=sqrt((shape1@data$p2x1y1-shape1@data$p3x1y1)^2+(shape1@data$p2x1y2-shape1@data$p3x1y2)^2)
shape1@data$mdp1x1y1=ifelse(shape1@data$elongated=="Yes",shape1@data$mdp1x1y1,shape1@data$mdp2x1y1)
shape1@data$mdp1x1y2=ifelse(shape1@data$elongated=="Yes",shape1@data$mdp1x1y2,shape1@data$mdp2x1y2)
shape1@data$mdp2x1y1=ifelse(shape1@data$elongated=="Yes",shape1@data$mdp2x1y1,shape1@data$mdp3x1y1)
shape1@data$mdp2x1y2=ifelse(shape1@data$elongated=="Yes",shape1@data$mdp2x1y2,shape1@data$mdp3x1y2)
shape1@data$mdp3x1y1=ifelse(shape1@data$elongated=="Yes",shape1@data$mdp3x1y1,shape1@data$mdp4x1y1)
shape1@data$mdp3x1y2=ifelse(shape1@data$elongated=="Yes",shape1@data$mdp3x1y2,shape1@data$mdp4x1y2)
shape1@data$mdp4x1y1=ifelse(shape1@data$elongated=="Yes",shape1@data$mdp4x1y1,shape1@data$mdp1x1y1)
shape1@data$mL=sqrt((shape1@data$mdp2x1y1-shape1@data$mdp4x1y1)^2+(shape1@data$mdp2x1y2-shape1@data$mdp4x1y2)^2)
shape1@data$mW=sqrt((shape1@data$mdp1x1y1-shape1@data$mdp3x1y1)^2+(shape1@data$mdp1x1y2-shape1@data$mdp3x1y2)^2)
shape1@data$Zcnr2=ifelse(shape1@data$elongated=="Yes",shape1@data$Zcnr2,shape1@data$Zcnr3)
shape1@data$Zcnr3=ifelse(shape1@data$elongated=="Yes",shape1@data$Zcnr3,shape1@data$Zcnr4)
shape1@data$Zcnr4=ifelse(shape1@data$elongated=="Yes",shape1@data$Zcnr4,shape1@data$Zcnr1)
shape1@data$Zmidp1=ifelse(shape1@data$elongated=="Yes",shape1@data$Zmidp1,shape1@data$Zmidp2)
shape1@data$Zmidp2=ifelse(shape1@data$elongated=="Yes",shape1@data$Zmidp2,shape1@data$Zmidp3)
shape1@data$Zmidp3=ifelse(shape1@data$elongated=="Yes",shape1@data$Zmidp3,shape1@data$Zmidp4)
shape1@data$Zmidp4=ifelse(shape1@data$elongated=="Yes",shape1@data$Zmidp4,shape1@data$Zmidp1)
shape1@data$dZcnr12=sqrt((shape1@data$Zcnr1-shape1@data$Zcnr2)^2)
shape1@data$dZcnr43=sqrt((shape1@data$Zcnr4-shape1@data$Zcnr3)^2)
shape1@data$dZcnr14=sqrt((shape1@data$Zcnr1-shape1@data$Zcnr4)^2)
shape1@data$dZcnr23=sqrt((shape1@data$Zcnr2-shape1@data$Zcnr3)^2)
shape1@data$dZmdip13=sqrt((shape1@data$Zmidp1-shape1@data$Zmidp3)^2)
shape1@data$dZmdip24=sqrt((shape1@data$Zmidp2-shape1@data$Zmidp4)^2)
###################################################################
#--------------Step 1---Use midpoint altitude differences----------
###################################################################
#step1=1 long landslides; step1=0 wide landslides
shape1@data$step1=ifelse(shape1@data$dZmdip24>shape1@data$dZmdip13, "Long", "Wide")#if YES then LONG, if NOT then WIDE
shape1@data$step1=as.factor(shape1@data$step1)
#                          repair=TRUE, force_ring=T,
#                          verbose=TRUE)
#shape1=merge(shape1, shape_length, by.x="id",df=T, sp=T)
#shape1@data[is.na(shape1@data)]=0
#---D8
#shape1@data$step2=ifelse(shape1@data$step1=="Long", ifelse(((shape1@data$mL)*1)>=shape1@data$slD8, "Wide", "Long"), "Wide")
#shape1@data$step2=as.factor(shape1@data$step2)
#summary(shape1@data$step2)
#writeOGR(shape1, ".", "miletin_ldl_database_D8", driver="ESRI Shapefile")
#---MFD
shape1@data$step2=ifelse(shape1@data$step1=="Long", ifelse(((shape1@data$mL)*1)>=shape1@data$slMFD, "Wide", "Long"), "Wide")
shape1@data$step2=as.factor(shape1@data$step2)
writeOGR(shape1, ".", "landslide_inventory_long_wide_result", driver="ESRI Shapefile")
#----------------------------SCRIPT END----------------------------
###################################################################
#--------------Validation------------------------------------------
###################################################################
validation1=data.frame(shape1@data$step1,shape1@data$real_type)
validation2=data.frame(shape1@data$step2,shape1@data$real_type)
ff1=ftable(validation1)
ff2=ftable(validation2)
fourfoldplot(ff1,col=c("blue","red"),conf.level = 0.95)
#pdf("fourfoldplot_step1.pdf")
fourfoldplot(ff1,col=c("blue","red"),conf.level = 0.95)
fourfoldplot(ff2,col=c("blue","red"),conf.level = 0.95)
fourfoldplot(ff2,col=c("blue","red"),conf.level = 0.95)
#
shape1@data$step1n=ifelse(shape1@data$step1=="Long",1,2)
shape1@data$step2n=ifelse(shape1@data$step2=="Long",1,2)
shape1@data$real_typen=ifelse(shape1@data$real_type=="Long",1,2)
shape1@data$check1=ifelse(shape1@data$step1==shape1@data$real_type, "Right", "Wrong")
#shape1@data$check1_type=ifelse(shape1@data$check=="Wrong",shape1@data$step1,"OK")
shape1@data$check2=ifelse(shape1@data$step2==shape1@data$real_type, "Right", "Wrong")
#shape1@data$check2_type=ifelse(shape1@data$check=="Wrong",shape1@data$step2,"OK")
shape1@data$real_typef=shape1@data$real_type
#
rocobj1 <- plot.roc(shape1@data$step1n, shape1@data$real_typen, percent=TRUE,  ci=TRUE, of="se",
specificities=seq(0, 100, 5), ci.type="shape", ci.col='#1c61b6AA')
#pdf("ROC_step1.pdf")
rocobj1 <- plot.roc(shape1@data$step1n, shape1@data$real_typen, percent=TRUE,  ci=TRUE, of="se",
specificities=seq(0, 100, 5), ci.type="shape", ci.col='#1c61b6AA')
#dev.off()
rocobj2 <- plot.roc(shape1@data$step2n, shape1@data$real_typen, percent=TRUE,  ci=TRUE, of="se",
specificities=seq(0, 100, 5), ci.type="shape", ci.col='#1c61b6AA')
```{r inc}
#pdf("ROC_step2.pdf")
rocobj2 <- plot.roc(shape1@data$step2n, shape1@data$real_typen, percent=TRUE,  ci=TRUE, of="se",
specificities=seq(0, 100, 5), ci.type="shape", ci.col='#1c61b6AA')
#dev.off()
#
tb1=table(validation1)
tb2=table(validation2)
cm1=confusionMatrix(tb1)
cm1=confusionMatrix(tb1)
cm2=confusionMatrix(tb2)
cm1
cm2
library(pROC)
install.packages("pROC")
library("plumber")
setwd(file.path("figureRadio"))
#setwd(file.path("figureRadio"))
path = paste("figure1.R", sep = "")
r <- plumb(path)
#setwd(file.path("figureRadio"))
path = paste("figureRadio.R", sep = "")
r <- plumb(path)
r$run(host = "0.0.0.0", port=8000)
setwd("~/projects/o2r-platform/bindings/o2r-bindings/controllers/spacetime")
library("plumber")
#setwd(file.path("figureRadio"))
path = paste("figureRadio.R", sep = "")
r <- plumb(path)
r$run(host = "0.0.0.0", port=8000)
r$run(host = "0.0.0.0", port=8123)
library("plumber")
#setwd(file.path("figureRadio"))
path = paste("figureRadio.R", sep = "")
r <- plumb(path)
r$run(host = "0.0.0.0", port=8123)
